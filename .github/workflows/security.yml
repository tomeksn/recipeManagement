name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Scan Python dependencies
      run: |
        find services/ -name "requirements*.txt" -exec echo "Scanning {}" \; -exec safety check -r {} \;
        find services/ -name "requirements*.txt" -exec pip-audit -r {} \;
        
    - name: Scan Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level=high
        
    - name: Create issue for vulnerabilities
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Vulnerabilities Detected',
            body: 'Automated security scan has detected vulnerabilities in dependencies. Please check the workflow logs for details.',
            labels: ['security', 'bug', 'high-priority']
          })
          
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [product-service, recipe-service, calculator-service, api-gateway, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        if [ "${{ matrix.service }}" == "frontend" ]; then
          docker build -t ${{ matrix.service }}:latest ./frontend
        else
          docker build -t ${{ matrix.service }}:latest -f ./services/${{ matrix.service }}/Dockerfile .
        fi
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.service }}:latest'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
